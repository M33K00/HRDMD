<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
<script src="../../scripts/datatables.js"></script>
<script src="https://kit.fontawesome.com/64cf43ccc2.js"></script>
<script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
  const tooltipTriggerList = [].slice.call(
    document.querySelectorAll('[data-bs-toggle="tooltip"]')
  );
  tooltipTriggerList.forEach((tooltipTriggerEl) => {
    new bootstrap.Tooltip(tooltipTriggerEl);
  });
});
</script>
<script>
  const loadingSpinner = document.getElementById("loadingSpinner");

  function showSpinner() {
    loadingSpinner.style.display = "flex";
  }

  function hideSpinner() {
    loadingSpinner.style.display = "none";
  }

  const originalFetch = window.fetch;

  window.fetch = async (...args) => {
    const [url, options] = args;
    
    // Check if the method is POST or GET before showing the spinner
    if (options && (options.method === 'POST' || options.method === 'GET')) {
      showSpinner(); // Show spinner before the request
    }

    try {
      const response = await originalFetch(...args); // Make the fetch call
      return response; // Return the response for further handling
    } catch (error) {
      console.error("Fetch error:", error);
      throw error; // Re-throw the error so it's not swallowed
    } finally {
      // Only hide the spinner for POST and GET requests
      if (options && (options.method === 'POST' || options.method === 'GET')) {
        hideSpinner();
      }
    }
  };
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleSidebar = document.getElementById("toggleSidebar");
    const sidebar = document.getElementById("sidebar");
    const overlay = document.getElementById("overlay");

    toggleSidebar.addEventListener("click", function (e) {
      e.preventDefault();
      sidebar.classList.toggle("active");
      overlay.classList.toggle("active");
    });

    overlay.addEventListener("click", function () {
      sidebar.classList.remove("active");
      overlay.classList.remove("active");
    });
  });
</script>
<script>
  $(document).ready(function () {
    $("table").DataTable({
      order: [0, "desc"],
    });
  });
</script>
<%# Delete Button %>
<script>
  const deleteButtons = document.querySelectorAll(".btn-delete");
  deleteButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      if (confirm(`Are you sure you want to permanently delete ${filename}?`)) {
        fetch(`/delete?file=${filename}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Delete ALL Button %>
<script>
  $(document).ready(function () {
    // Event listener for clicking the "Delete All" button
    $("#deleteAllBtn").on("click", function (e) {
      e.preventDefault(); // Prevent the default action (i.e., following the link)

      // Show a confirmation dialog
      if (
        confirm(
          "Eyow u kno whatchu doin cuh?? sure u wanna delete all this shit??"
        )
      ) {
        // If user confirms, redirect to the delete-all route
        window.location.href = "/delete-all";
      }
    });
  });
</script>

<%# Archive Button %>
<script>
  const ArchiveButtons = document.querySelectorAll(".btn-archive");
  ArchiveButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      const hrrole = button.getAttribute("data-hrrole");
      const username = button.getAttribute("data-username");
      if (confirm(`Are you sure you want to delete ${filename}?`)) {
        fetch(`/recyclebin?file=${filename}&hrrole=${hrrole}&name=${username}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Reject Button %>
<script>
  const RejectButtons = document.querySelectorAll(".btn-reject");
  RejectButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      const href = button.getAttribute("href");
      if (confirm(`Are you sure you want to reject ${filename}?`)) {
        fetch(`${href}`)
          .then((response) => {
            if (response.ok) {
              const message = response.url.split("message=")[1]; // Extract message from URL
              alert("Document Rejected Successfully"); // Display the message (you can use a better UI than alert)
              window.location.reload(); // Reload the page
            } else {
              throw new Error("Error rejecting file");
            }
          })
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Delete role file Button %>
<script>
  const DeleteRF = document.querySelectorAll(".btn-deleterf");
  DeleteRF.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      if (confirm(`RF Are you sure you want to delete ${filename}?`)) {
        fetch(`/delete_rolefile?file=${filename}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# SEARCH SCRIPT %>
<script>
  // Get the search input element
  const searchInput = document.getElementById("searchInput");

  // Add event listener to the search input
  searchInput.addEventListener("input", function () {
    const searchValue = this.value.toLowerCase(); // Convert input value to lowercase for case-insensitive search

    // Get all cards
    const cards = document.querySelectorAll(".page-item");

    // Loop through each card
    cards.forEach((card) => {
      const cardText = card.textContent.toLowerCase(); // Get card content and convert to lowercase

      // If card content includes the search value, display the card, otherwise hide it
      if (cardText.includes(searchValue)) {
        card.style.display = "block"; // Show card
      } else {
        card.style.display = "none"; // Hide card
      }
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const convertLinks = document.querySelectorAll(".convert-link");
    const pdfViewer = document.getElementById("pdfViewer");

    convertLinks.forEach((link) => {
      link.addEventListener("click", function (event) {
        event.preventDefault();
        const fileName = this.getAttribute("data-filename");
        fetch(`/convertFromOffice/${fileName}`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Conversion failed");
            }
            return response.blob();
          })
          .then((blob) => {
            const objectURL = URL.createObjectURL(blob);
            pdfViewer.src = objectURL;
            pdfViewer.style.display = "block"; // Show the PDF viewer
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Conversion failed");
          });
      });
    });
  });
</script>
<script>
  document.querySelectorAll(".svg-trigger-docx").forEach(function (svg) {
    svg.addEventListener("click", function () {
      var modal = document.getElementById("modal");

      // Set the source of the iframe to the PDF file
      var fileName = svg
        .closest(".page-item")
        .querySelector(".card-text").textContent;
      var pdfViewer = document.getElementById("pdfViewer");
      pdfViewer.src = "../../files/documents/" + fileName;
    });
  });
</script>
<%# FILTER SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const filterButtons = document.querySelectorAll(".filter-btn");
    const pageItems = document.querySelectorAll(".page-item");

    filterButtons.forEach(function (button) {
      button.addEventListener("click", function () {
        const extension = this.getAttribute("data-extension");
        pageItems.forEach(function (item) {
          const fileExtension = item
            .querySelector(".card-text")
            .textContent.split(".")
            .pop();
          if (
            extension === "all" ||
            (extension === "excel" && fileExtension === "xlsx") ||
            (extension === "pdf" && fileExtension === "pdf") ||
            (extension === "docx" && fileExtension === "docx")
          ) {
            item.style.display = "block";
          } else {
            item.style.display = "none";
          }
        });
      });
    });
  });
  pageItems.forEach(function (item) {
    const fileExtension = item
      .querySelector(".card-text")
      .textContent.split(".")
      .pop();
    if (
      extension === "all" ||
      (extension === "excel" && fileExtension === "xlsx") ||
      fileExtension === extension
    ) {
      item.style.display = "block";
    } else {
      item.style.display = "none";
    }
  });
</script>
<%# SORT SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const sortButton = document.querySelector(".sort-btn");
    const pageItems = document.querySelectorAll(".page-item");
    let ascendingOrder = true; // Default sorting order

    sortButton.addEventListener("click", function () {
      ascendingOrder = !ascendingOrder; // Toggle sorting order on button click

      const sortedItems = Array.from(pageItems).sort((a, b) => {
        const dateA = new Date(a.querySelector(".card-footer").textContent);
        const dateB = new Date(b.querySelector(".card-footer").textContent);
        return ascendingOrder ? dateA - dateB : dateB - dateA; // Sort based on order
      });

      sortedItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });
    });
  });
</script>

<%# SORT SCRIPT ALPHABETICAL %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleSortButton = document.querySelector(".toggle-sort-btn");
    const pageItemsContainer = document.querySelector(".page-container");
    let isAscending = true; // Flag to track sorting order

    toggleSortButton.addEventListener("click", function () {
      const pageItems = Array.from(
        pageItemsContainer.querySelectorAll(".page-item")
      );

      pageItems.sort((a, b) => {
        const textA = a.querySelector(".card-text").textContent.toLowerCase();
        const textB = b.querySelector(".card-text").textContent.toLowerCase();

        if (isAscending) {
          return textA.localeCompare(textB); // Sort alphabetically ascending
        } else {
          return textB.localeCompare(textA); // Sort alphabetically descending
        }
      });

      pageItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });

      isAscending = !isAscending; // Toggle sorting order flag
    });
  });
</script>
<%# RENAME FILE %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const renameButtons = document.querySelectorAll(".btn-rename");
    const renameModal = document.getElementById("renameModal");
    const newFileNameInput = document.getElementById("newFileNameInput");
    const renameBtn = document.getElementById("renameBtn");
    const closeBtn = document.getElementById("closerename"); // Update to target the correct close button ID

    let fileName; // Declare fileName variable in the outer scope

    renameButtons.forEach(function (button) {
      button.addEventListener("click", function (e) {
        e.preventDefault();
        fileName = this.dataset.file; // Set the fileName variable
        newFileNameInput.value = fileName; // Set the input field value to the current file name
        renameModal.style.display = "block"; // Show the modal
      });
    });

    renameBtn.addEventListener("click", function () {
      const newFileName = newFileNameInput.value.trim(); // Get the new file name from the input field

      if (newFileName !== "") {
        renameModal.style.display = "none"; // Hide the modal
        renameFile(fileName, newFileName);
      } else {
        alert("Please enter a valid file name.");
      }
    });

    closeBtn.addEventListener("click", function () {
      renameModal.style.display = "none"; // Hide the modal if the close button is clicked
    });

    function renameFile(oldFileName, newFileName) {
      console.log("Old Name:", oldFileName);
      console.log("New Name:", newFileName);

      // Perform the AJAX request to rename the file using newFileName
      const xhr = new XMLHttpRequest();
      xhr.open("POST", "/rename");
      xhr.setRequestHeader("Content-Type", "application/json");

      xhr.onload = function () {
        if (xhr.status === 200) {
          console.log("File renamed successfully.");
          // Optionally, reload the page or update the file list on success
          window.location.reload();
        } else {
          console.error("Error renaming file:", xhr.status, xhr.responseText);
          alert("Error renaming file.");
        }
      };

      const data = JSON.stringify({ file: oldFileName, newName: newFileName });
      xhr.send(data);
    }
  });
</script>
<script>
  // Check if the auto-dismiss alert element exists
  const autoDismissAlert = document.getElementById("autoDismissAlert");
  if (autoDismissAlert) {
    // Automatically dismiss the alert after 5 seconds
    setTimeout(() => {
      autoDismissAlert.classList.add("hide"); // Add hide class to the alert
      setTimeout(() => {
        autoDismissAlert.remove(); // Remove the alert element from the DOM
      }, 500); // Wait for transition to complete before removing
    }, 5000); // 5000 milliseconds = 5 seconds
  }
</script>

<%# Search Tables %>
<script>
  function searchTables() {
    const input = document.getElementById("accInput");
    const filter = input.value.toLowerCase();

    // Get the active tab content
    const activeTabContent = document.querySelector(
      ".tab-pane.fade.active.show"
    );

    // Search in the table within the active tab content
    searchTable(activeTabContent, filter);
  }

  function searchTable(activeTabContent, filter) {
    // Get the table within the active tab content
    const table = activeTabContent.querySelector("table");
    if (!table) return; // Exit if no table found in the active tab content

    const tbody = table.querySelector("tbody");
    if (!tbody) return; // Exit if no tbody found in the table

    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>

<%# Search Tables Home %>
<script>
  function searchTable2() {
    const input = document.getElementById("filesInput");
    const filter = input.value.toLowerCase();

    // Get the active tab content
    const activeTabContent = document.querySelector(".content-div.active");

    // Search in the table within the active tab content
    searchTable(activeTabContent, filter);
  }

  function searchTable(activeTabContent, filter) {
    // Get the table within the active tab content
    const table = activeTabContent.querySelector("table");
    if (!table) return; // Exit if no table found in the active tab content

    const tbody = table.querySelector("tbody");
    if (!tbody) return; // Exit if no tbody found in the table

    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>
<script>
  function searchFunc() {
    const input = document.getElementById("accInput");
    const filter = input.value.toLowerCase();
    const table = document.getElementById("table");
    const tbody = table.getElementsByTagName("tbody")[0];
    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>
<script>
function showConfirmationModal(action, fileId) {
  // Set the action text and file ID in the modal
  document.getElementById("actionText").textContent = action;
  const confirmActionBtn = document.getElementById("confirmAction");

  // Show/hide remarks input based on the action
  const remarksInputContainer = document.getElementById("remarksInputContainer");
  if (action === "mark this task for approval" || action === "mark this task for reassignment" || action === "add remarks") {
    remarksInputContainer.style.display = "block";
  } else {
    remarksInputContainer.style.display = "none";
  }

  // Customize confirm button based on the action
  switch (action) {
    case "change the assignment for this task":
      confirmActionBtn.textContent = "Change Assignment";
      confirmActionBtn.className = "btn btn-primary";
      break;
    case "move this task to archive":
      confirmActionBtn.textContent = "Move to Archive";
      confirmActionBtn.className = "btn btn-warning";
      break;
    case "Reject":
      confirmActionBtn.textContent = "Reject";
      confirmActionBtn.className = "btn btn-danger";
      break;
    case "Pending":
      confirmActionBtn.textContent = "Mark as Pending";
      confirmActionBtn.className = "btn btn-warning";
      break;
    case "add remarks":
      confirmActionBtn.textContent = "Add Remarks";
      confirmActionBtn.className = "btn btn-primary";
      break;
    case "mark this task for approval":
      confirmActionBtn.textContent = "Mark for Approval";
      confirmActionBtn.className = "btn btn-primary";
      break;
    case "set this task as approved":
      confirmActionBtn.textContent = "Mark as approved";
      confirmActionBtn.className = "btn btn-success";
      break;
    case "mark this task for reassignment":
      confirmActionBtn.textContent = "Reassign";
      confirmActionBtn.className = "btn btn-warning";
    default:
      break;
  }

  // Show the modal
  var confirmationModal = new bootstrap.Modal(
    document.getElementById("confirmationModal")
  );
  confirmationModal.show();

  // Set up the confirm button action
  confirmActionBtn.onclick = function () {
    const remarksInput = document.getElementById("remarksInput").value;
    performAction(action, fileId, remarksInput);
    confirmationModal.hide();
  };
}

function performAction(action, fileId, remarks) {
  // Perform the action based on the button clicked
  switch (action) {
    case "move this task to archive":
      window.location.href = `/archive_file/${fileId}`;
      break;
    case "Reject":
      window.location.href = `/reject-file/${fileId}`;
      break;
    case "Pending":
      window.location.href = `/pending-file/${fileId}`;
      break;
    case "add remarks":
      // Include remarks in the URL when adding remarks
      window.location.href = `/update-task/${fileId}?remarks=${encodeURIComponent(remarks)}`;
      break;
    case "mark this task for approval":
      // Include remarks in the URL when marking for approval
      window.location.href = `/for-approval-file/${fileId}?remarks=${encodeURIComponent(remarks)}`;
      break;
    case "set this task as approved":
      window.location.href = `/approve-file/${fileId}`;
      break;
    case "mark this task for reassignment":
      // Include remarks in the URL when reassigning
      window.location.href = `/reassign-file/${fileId}?remarks=${encodeURIComponent(remarks)}`;
      break;
    default:
      break;
  }
}

// Change Assignee Modal
function showChangeAssigneeModal(fileId) {
  const confirmActionBtn = document.getElementById("confirmChange");

  // Show the modal
  const changeAssigneeModal = new bootstrap.Modal(document.getElementById("changeAssigneeModal"));
  changeAssigneeModal.show();

  // Set up the confirm button action
  confirmActionBtn.onclick = function () {
    const newAssignee = document.getElementById("assignTo").value;
    const empID = document.getElementById("empID").value;
    console.log(newAssignee);
    if (newAssignee) {  // Ensure an assignee is selected
      window.location.href = `/change-assignee/${fileId}?newAssignee=${encodeURIComponent(newAssignee)}&empID=${encodeURIComponent(empID)}`;
      changeAssigneeModal.hide();
    } else {
      alert("Please select an assignee.");
    }
  };

  // Set up the cancel button action
  document.getElementById("cancelAction").onclick = function () {
    changeAssigneeModal.hide();
  };
}

// Accept Task
function showAcceptTaskModal(fileId, email) {
  const confirmActionBtn = document.getElementById("confirmAccept");

  // Show the modal
  const acceptTaskModal = new bootstrap.Modal(document.getElementById("acceptTaskModal"));
  acceptTaskModal.show();

  // Set up the confirm button action
  confirmActionBtn.onclick = function () {
    window.location.href = `/take-task/${fileId}/${encodeURIComponent(email)}`;
    acceptTaskModal.hide();
  }

  // Set up the cancel button action
  document.getElementById("cancelAccept").onclick = function () {
    acceptTaskModal.hide();
  };
}
</script>
<script>
  // script.js
  document.addEventListener("DOMContentLoaded", function() {
      const submitButton = document.getElementById('submitButton');
      const submitPaperDiv = document.getElementById('submitPaper');

      submitButton.addEventListener('click', function() {
          if (submitPaperDiv.classList.contains('visible')) {
              submitPaperDiv.classList.remove('visible');
              submitPaperDiv.classList.add('hidden');
          } else {
              submitPaperDiv.classList.remove('hidden');
              submitPaperDiv.classList.add('visible');
          }
      });
  });
  </script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    var timeElapsedSpan = document.getElementById('time-elapsed');
    
    // Function to extract initial hours and minutes from the span text
    function extractTime(text) {
      var match = text.match(/(\d+) hours and (\d+) minutes/);
      if (match) {
        return {
          hours: parseInt(match[1], 10),
          minutes: parseInt(match[2], 10)
        };
      }
      return { hours: 0, minutes: 0 };
    }

    // Extract initial values
    var time = extractTime(timeElapsedSpan.innerText);
    var totalHours = time.hours;
    var totalMinutes = time.minutes;

    function updateTime() {
      totalMinutes++;
      if (totalMinutes >= 60) {
        totalMinutes = 0;
        totalHours++;
      }

      // Update the displayed time
      timeElapsedSpan.innerText = totalHours + ' hours and ' + totalMinutes + ' minutes';
    }

    // Update the time every minute (60000 milliseconds)
    setInterval(updateTime, 60000);

    // Optionally, update every second if you want more frequent updates
    // setInterval(updateTime, 1000);
  });
</script>
<script>
  $(document).ready(function() {
      let lastChecked = new Date().toISOString();
      const userEmail = '<%= user.email %>'; // Embed user email directly from server-side rendering

      function checkForNewTasks() {
          $.ajax({
              url: 'http://172.23.9.142:3939/api/new-tasks',
              method: 'GET',
              data: {
                  email: userEmail,
                  lastChecked: lastChecked
              },
              success: function(tasks) {
                  if (tasks.length > 0) {
                      tasks.forEach(task => {
                          showNotification(); // Call function to show notification
                      });
                      lastChecked = new Date().toISOString(); // Update lastChecked
                  }
              },
              error: function(err) {
                  console.error('Error fetching new tasks:', err);
              }
          });
      }

      function showNotification() {
          // Create the notification HTML
          const notificationHtml = `
              <div class="top-middle slide-down">
                  <div class="alert alert-dismissible notif-container alert-success">
                      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                      <strong>You have a new task!</strong> head to the Task Manager page.
                  </div>
              </div>
          `;
          // Append the notification to the body or a specific container
          $('body').append(notificationHtml);
      }

      // Poll every 5 seconds (5000 milliseconds)
      setInterval(checkForNewTasks, 5000);
  });
</script>
<script>
  // Logout Confirmation
  document.addEventListener('DOMContentLoaded', function () {
    // Get the modal element and the button
    var logOutModal = new bootstrap.Modal(document.getElementById('logOutModal'), {
      keyboard: false
    });
  
    var logoutButton = document.getElementById('logoutButton');
  
    // Add a click event listener to the button
    logoutButton.addEventListener('click', function () {
      logOutModal.show();
    });
  });
  
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('logoutConfirm').addEventListener('click', function () {
      var userStatus = this.getAttribute('data-user-status');
      if (userStatus === 'IN') {
        window.location.href = '/dtr_user/<%= user._id %>';
      } else {
        window.location.href = '/logout';
      }
    });
  });
</script>
<script>
  function handleAction(id) {
    window.location.href = `/fileDTR/${id}`;
  }
</script>
<script>
  function playSoundAtTime(timeString) {
    const soundPlayedKey = 'timeoutSoundPlayed'; 

    // Check if the sound has already been played
    if (sessionStorage.getItem(soundPlayedKey) === 'true') {
      return; // Exit the function if sound has already been played
    }

    const [hours, minutes] = timeString.split(':');
    const targetTime = new Date();
    targetTime.setHours(hours);
    targetTime.setMinutes(minutes - 10); // Subtract 15 minutes
    targetTime.setSeconds(0);

    const intervalId = setInterval(() => {
      console.log("Checking time...");
      const now = new Date();

      if (now >= targetTime) {
        clearInterval(intervalId); // Stop checking after the target time is reached

        // Play the sound
        const audio = new Audio('../../sounds/timeout.wav'); // Replace with your sound file path
        audio.play();

        // Set the flag in sessionStorage
        sessionStorage.setItem('timeoutSoundPlayed', 'true');

        $(document).ready(function () {
          const toastElement = $('.toast-DTR'); 
          $(toastElement).toast({autohide: false});
          $(toastElement).toast('show');
        });
      }
    }, 2000); // Check every second
  }

  const timeOut = '<%= hrsettings.endTime %>'; // Ensure this contains a valid time like "15:30"
  playSoundAtTime(timeOut);
</script>


