<script src="../../scripts/jquery.min.js"></script>
<script src="../../scripts/datatables.js"></script>
<script src="https://kit.fontawesome.com/64cf43ccc2.js"></script>
<script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.6/umd/popper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.min.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleSidebar = document.getElementById("toggleSidebar");
    const sidebar = document.getElementById("sidebar");
    const overlay = document.getElementById("overlay");

    toggleSidebar.addEventListener("click", function (e) {
      e.preventDefault();
      sidebar.classList.toggle("active");
      overlay.classList.toggle("active");
    });

    overlay.addEventListener("click", function () {
      sidebar.classList.remove("active");
      overlay.classList.remove("active");
    });
  });
</script>
<script>
  $(document).ready(function () {
    $("table").DataTable({
      order: [0, "desc"],
    });
  });
</script>
<%# Delete Button %>
<script>
  const deleteButtons = document.querySelectorAll(".btn-delete");
  deleteButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      if (confirm(`Are you sure you want to permanently delete ${filename}?`)) {
        fetch(`/delete?file=${filename}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Delete ALL Button %>
<script>
  $(document).ready(function () {
    // Event listener for clicking the "Delete All" button
    $("#deleteAllBtn").on("click", function (e) {
      e.preventDefault(); // Prevent the default action (i.e., following the link)

      // Show a confirmation dialog
      if (
        confirm(
          "Eyow u kno whatchu doin cuh?? sure u wanna delete all this shit??"
        )
      ) {
        // If user confirms, redirect to the delete-all route
        window.location.href = "/delete-all";
      }
    });
  });
</script>

<%# Archive Button %>
<script>
  const ArchiveButtons = document.querySelectorAll(".btn-archive");
  ArchiveButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      const hrrole = button.getAttribute("data-hrrole");
      const username = button.getAttribute("data-username");
      if (confirm(`Are you sure you want to delete ${filename}?`)) {
        fetch(`/recyclebin?file=${filename}&hrrole=${hrrole}&name=${username}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Reject Button %>
<script>
  const RejectButtons = document.querySelectorAll(".btn-reject");
  RejectButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      const href = button.getAttribute("href");
      if (confirm(`Are you sure you want to reject ${filename}?`)) {
        fetch(`${href}`)
          .then((response) => {
            if (response.ok) {
              const message = response.url.split("message=")[1]; // Extract message from URL
              alert("Document Rejected Successfully"); // Display the message (you can use a better UI than alert)
              window.location.reload(); // Reload the page
            } else {
              throw new Error("Error rejecting file");
            }
          })
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Delete role file Button %>
<script>
  const DeleteRF = document.querySelectorAll(".btn-deleterf");
  DeleteRF.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      if (confirm(`RF Are you sure you want to delete ${filename}?`)) {
        fetch(`/delete_rolefile?file=${filename}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# SEARCH SCRIPT %>
<script>
  // Get the search input element
  const searchInput = document.getElementById("searchInput");

  // Add event listener to the search input
  searchInput.addEventListener("input", function () {
    const searchValue = this.value.toLowerCase(); // Convert input value to lowercase for case-insensitive search

    // Get all cards
    const cards = document.querySelectorAll(".page-item");

    // Loop through each card
    cards.forEach((card) => {
      const cardText = card.textContent.toLowerCase(); // Get card content and convert to lowercase

      // If card content includes the search value, display the card, otherwise hide it
      if (cardText.includes(searchValue)) {
        card.style.display = "block"; // Show card
      } else {
        card.style.display = "none"; // Hide card
      }
    });
  });
</script>
<%# PDF SCRIPT %>
<script>
  function determineRoleFolder(roleElement) {
    if (!roleElement) {
      console.error("Role element not found.");
      return null;
    }

    const role = roleElement.textContent.trim();

    switch (role) {
      case "Entry Level":
        return "role1";
      case "Individual Contributors":
        return "role2";
      case "HR Manager":
        return "role3";
      case "HR Director":
        return "role4";
      default:
        console.error("Unknown role:", role);
        return "role1"; // Default role folder
    }
  }

  document.querySelectorAll(".file-preview").forEach(function (previewElement) {
    previewElement.addEventListener("click", function (event) {
      event.preventDefault(); // Prevent default link behavior

      var modal = document.getElementById("modal");
      modal.style.display = "block";

      var roleElement = previewElement
        .closest(".page-item")
        .querySelector(".file-hr-role");
      var roleFolder = determineRoleFolder(roleElement);

      if (roleFolder) {
        var fileName = previewElement
          .closest(".page-item")
          .querySelector(".card-text")
          .textContent.trim();
        var pdfViewer = document.getElementById("pdfViewer");
        pdfViewer.src = "../../files/" + roleFolder + "/" + fileName;
      } else {
        console.error("Role folder not determined.");
      }
    });
  });

  document.querySelector(".close").addEventListener("click", function () {
    document.getElementById("modal").style.display = "none";
  });
</script>

<%# ENLARGE MODAL SCRIPT %>
<script>
  function toggleEnlargedModal() {
    const modal = document.getElementById("modal");
    modal.classList.toggle("enlarged");
  }

  // Add event listener for the 'Enlarge' button
  document
    .getElementById("enlargeButton")
    .addEventListener("click", function () {
      toggleEnlargedModal();
    });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const convertLinks = document.querySelectorAll(".convert-link");
    const pdfViewer = document.getElementById("pdfViewer");

    convertLinks.forEach((link) => {
      link.addEventListener("click", function (event) {
        event.preventDefault();
        const fileName = this.getAttribute("data-filename");
        fetch(`/convertFromOffice/${fileName}`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Conversion failed");
            }
            return response.blob();
          })
          .then((blob) => {
            const objectURL = URL.createObjectURL(blob);
            pdfViewer.src = objectURL;
            pdfViewer.style.display = "block"; // Show the PDF viewer
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Conversion failed");
          });
      });
    });
  });
</script>
<script>
  document.querySelectorAll(".svg-trigger-docx").forEach(function (svg) {
    svg.addEventListener("click", function () {
      var modal = document.getElementById("modal");

      // Set the source of the iframe to the PDF file
      var fileName = svg
        .closest(".page-item")
        .querySelector(".card-text").textContent;
      var pdfViewer = document.getElementById("pdfViewer");
      pdfViewer.src = "../../files/documents/" + fileName;
    });
  });
</script>
<%# FILTER SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const filterButtons = document.querySelectorAll(".filter-btn");
    const pageItems = document.querySelectorAll(".page-item");

    filterButtons.forEach(function (button) {
      button.addEventListener("click", function () {
        const extension = this.getAttribute("data-extension");
        pageItems.forEach(function (item) {
          const fileExtension = item
            .querySelector(".card-text")
            .textContent.split(".")
            .pop();
          if (
            extension === "all" ||
            (extension === "excel" && fileExtension === "xlsx") ||
            (extension === "pdf" && fileExtension === "pdf") ||
            (extension === "docx" && fileExtension === "docx")
          ) {
            item.style.display = "block";
          } else {
            item.style.display = "none";
          }
        });
      });
    });
  });
  pageItems.forEach(function (item) {
    const fileExtension = item
      .querySelector(".card-text")
      .textContent.split(".")
      .pop();
    if (
      extension === "all" ||
      (extension === "excel" && fileExtension === "xlsx") ||
      fileExtension === extension
    ) {
      item.style.display = "block";
    } else {
      item.style.display = "none";
    }
  });
</script>
<%# SORT SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const sortButton = document.querySelector(".sort-btn");
    const pageItems = document.querySelectorAll(".page-item");
    let ascendingOrder = true; // Default sorting order

    sortButton.addEventListener("click", function () {
      ascendingOrder = !ascendingOrder; // Toggle sorting order on button click

      const sortedItems = Array.from(pageItems).sort((a, b) => {
        const dateA = new Date(a.querySelector(".card-footer").textContent);
        const dateB = new Date(b.querySelector(".card-footer").textContent);
        return ascendingOrder ? dateA - dateB : dateB - dateA; // Sort based on order
      });

      sortedItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });
    });
  });
</script>

<%# SORT SCRIPT ALPHABETICAL %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleSortButton = document.querySelector(".toggle-sort-btn");
    const pageItemsContainer = document.querySelector(".page-container");
    let isAscending = true; // Flag to track sorting order

    toggleSortButton.addEventListener("click", function () {
      const pageItems = Array.from(
        pageItemsContainer.querySelectorAll(".page-item")
      );

      pageItems.sort((a, b) => {
        const textA = a.querySelector(".card-text").textContent.toLowerCase();
        const textB = b.querySelector(".card-text").textContent.toLowerCase();

        if (isAscending) {
          return textA.localeCompare(textB); // Sort alphabetically ascending
        } else {
          return textB.localeCompare(textA); // Sort alphabetically descending
        }
      });

      pageItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });

      isAscending = !isAscending; // Toggle sorting order flag
    });
  });
</script>
<%# RENAME FILE %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const renameButtons = document.querySelectorAll(".btn-rename");
    const renameModal = document.getElementById("renameModal");
    const newFileNameInput = document.getElementById("newFileNameInput");
    const renameBtn = document.getElementById("renameBtn");
    const closeBtn = document.getElementById("closerename"); // Update to target the correct close button ID

    let fileName; // Declare fileName variable in the outer scope

    renameButtons.forEach(function (button) {
      button.addEventListener("click", function (e) {
        e.preventDefault();
        fileName = this.dataset.file; // Set the fileName variable
        newFileNameInput.value = fileName; // Set the input field value to the current file name
        renameModal.style.display = "block"; // Show the modal
      });
    });

    renameBtn.addEventListener("click", function () {
      const newFileName = newFileNameInput.value.trim(); // Get the new file name from the input field

      if (newFileName !== "") {
        renameModal.style.display = "none"; // Hide the modal
        renameFile(fileName, newFileName);
      } else {
        alert("Please enter a valid file name.");
      }
    });

    closeBtn.addEventListener("click", function () {
      renameModal.style.display = "none"; // Hide the modal if the close button is clicked
    });

    function renameFile(oldFileName, newFileName) {
      console.log("Old Name:", oldFileName);
      console.log("New Name:", newFileName);

      // Perform the AJAX request to rename the file using newFileName
      const xhr = new XMLHttpRequest();
      xhr.open("POST", "/rename");
      xhr.setRequestHeader("Content-Type", "application/json");

      xhr.onload = function () {
        if (xhr.status === 200) {
          console.log("File renamed successfully.");
          // Optionally, reload the page or update the file list on success
          window.location.reload();
        } else {
          console.error("Error renaming file:", xhr.status, xhr.responseText);
          alert("Error renaming file.");
        }
      };

      const data = JSON.stringify({ file: oldFileName, newName: newFileName });
      xhr.send(data);
    }
  });
</script>
<script>
  // Check if the auto-dismiss alert element exists
  const autoDismissAlert = document.getElementById("autoDismissAlert");
  if (autoDismissAlert) {
    // Automatically dismiss the alert after 5 seconds
    setTimeout(() => {
      autoDismissAlert.classList.add("hide"); // Add hide class to the alert
      setTimeout(() => {
        autoDismissAlert.remove(); // Remove the alert element from the DOM
      }, 500); // Wait for transition to complete before removing
    }, 5000); // 5000 milliseconds = 5 seconds
  }
</script>

<%# Search Tables %>
<script>
  function searchTables() {
    const input = document.getElementById("accInput");
    const filter = input.value.toLowerCase();

    // Get the active tab content
    const activeTabContent = document.querySelector(
      ".tab-pane.fade.active.show"
    );

    // Search in the table within the active tab content
    searchTable(activeTabContent, filter);
  }

  function searchTable(activeTabContent, filter) {
    // Get the table within the active tab content
    const table = activeTabContent.querySelector("table");
    if (!table) return; // Exit if no table found in the active tab content

    const tbody = table.querySelector("tbody");
    if (!tbody) return; // Exit if no tbody found in the table

    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>

<%# Search Tables Home %>
<script>
  function searchTable2() {
    const input = document.getElementById("filesInput");
    const filter = input.value.toLowerCase();

    // Get the active tab content
    const activeTabContent = document.querySelector(".content-div.active");

    // Search in the table within the active tab content
    searchTable(activeTabContent, filter);
  }

  function searchTable(activeTabContent, filter) {
    // Get the table within the active tab content
    const table = activeTabContent.querySelector("table");
    if (!table) return; // Exit if no table found in the active tab content

    const tbody = table.querySelector("tbody");
    if (!tbody) return; // Exit if no tbody found in the table

    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>

<script>
  function searchFunc() {
    const input = document.getElementById("accInput");
    const filter = input.value.toLowerCase();
    const table = document.getElementById("table");
    const tbody = table.getElementsByTagName("tbody")[0];
    const rows = tbody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      const cells = row.getElementsByTagName("td");
      let found = false;

      for (let j = 0; j < cells.length; j++) {
        const cell = cells[j];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toLowerCase().indexOf(filter) > -1) {
            found = true;
            break;
          }
        }
      }

      if (found) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const popupContainer = document.getElementById("popupContainer");
    const popupHeader = document.getElementById("popupHeader");
    const popupReason = document.getElementById("popupReason");
    const popupHeader2 = document.getElementById("popupHeader2");
    const popupDecline = document.getElementById("popupDecline");
    const popupRows = document.querySelectorAll(".popup-row");
    let popupTimeout; // Variable to hold the timeout ID

    popupRows.forEach((row) => {
      row.addEventListener("mouseover", function (event) {
        const mouseX = event.clientX;
        const mouseY = event.clientY;

        popupHeader.textContent = "Leave Reason:";
        popupReason.textContent = this.getAttribute("data-reason");

        // Check if the row has the data-declinereason attribute
        const declineReason = this.getAttribute("data-declinereason");
        if (declineReason) {
          popupHeader2.textContent = "Decline Reason:";
          popupDecline.textContent = declineReason;
        } else {
          popupHeader2.textContent = ""; // Clear the header if no decline reason
          popupDecline.textContent = ""; // Clear the decline reason
        }

        // Clear previous timeout if any
        clearTimeout(popupTimeout);

        // Set a new timeout to show the popup after a delay (e.g., 500 milliseconds)
        popupTimeout = setTimeout(() => {
          popupContainer.style.display = "block";
          popupContainer.style.top = mouseY + "px";
          popupContainer.style.left = mouseX + "px";
        }, 500); // Adjust the delay time as needed
      });

      row.addEventListener("mouseleave", function () {
        // Clear the timeout when leaving the row to prevent the delayed popup from appearing
        clearTimeout(popupTimeout);

        popupContainer.style.display = "none";
      });
    });

    // Add event listener to hide popup when clicking outside
    document.addEventListener("click", function (event) {
      if (
        !popupContainer.contains(event.target) &&
        !popupRows.includes(event.target)
      ) {
        popupContainer.style.display = "none";
      }
    });
  });
</script>
<script>
  function updateClock() {
    const now = new Date();
    let hours = now.getHours();
    const minutes = now.getMinutes().toString().padStart(2, "0");
    let timeString = "";

    // Convert hours to 12-hour format and determine AM/PM
    const amPm = hours >= 12 ? "PM" : "AM";
    hours = hours % 12 || 12; // Convert midnight (0) to 12 AM

    timeString = `${hours}:${minutes} ${amPm}`;
    document.getElementById("currentTime").textContent = timeString;

    // Change background based on time of day
    const currentTime = document.getElementById("bgTime");
    if (hours >= 5 && hours < 12 && amPm === "AM") {
      // Morning background
      currentTime.style.backgroundImage = "url('../images/morning.png')";
    } else if (hours <= 12 && hours <= 6 && amPm === "PM") {
      // Afternoon background
      currentTime.style.backgroundImage = "url('../images/afternoon.png')";
    } else {
      // Evening/Night background
      currentTime.style.backgroundImage = "url('../images/night.png')";
    }
  }

  // Update the clock and background every second
  setInterval(updateClock, 1000);

  // Initial call to set the clock and background immediately when the page loads
  updateClock();
</script>
<script>
  function showConfirmationModal(action, fileId) {
    // Set the action text and file ID in the modal
    document.getElementById("actionText").textContent = action;
    const confirmActionBtn = document.getElementById("confirmAction");

    // Customize confirm button based on the action
    switch (action) {
      case "Archive":
        confirmActionBtn.textContent = "Archive";
        confirmActionBtn.className = "btn btn-secondary";
        break;
      case "Reject":
        confirmActionBtn.textContent = "Reject";
        confirmActionBtn.className = "btn btn-danger";
        break;
      case "Pending":
        confirmActionBtn.textContent = "Mark as Pending";
        confirmActionBtn.className = "btn btn-warning";
        break;
      case "Revision":
        confirmActionBtn.textContent = "Send for Revision";
        confirmActionBtn.className = "btn btn-dark";
        break;
      case "Approve":
        confirmActionBtn.textContent = "Approve";
        confirmActionBtn.className = "btn btn-success";
        break;
      default:
        break;
    }

    // Show the modal
    var confirmationModal = new bootstrap.Modal(
      document.getElementById("confirmationModal")
    );
    confirmationModal.show();

    // Set up the confirm button action
    confirmActionBtn.onclick = function () {
      performAction(action, fileId);
      confirmationModal.hide();
    };
  }

  function performAction(action, fileId) {
    // Perform the action based on the button clicked
    switch (action) {
      case "Archive":
        window.location.href = `/archive_file/${fileId}`;
        break;
      case "Reject":
        window.location.href = `/reject-file/${fileId}`;
        break;
      case "Pending":
        window.location.href = `/pending-file/${fileId}`;
        break;
      case "Revision":
        window.location.href = `/revision-file/${fileId}`;
        break;
      case "Approve":
        window.location.href = `/approve-file/${fileId}`;
        break;
      default:
        break;
    }
  }
</script>
