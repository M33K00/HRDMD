<script src="../../scripts/jquery.min.js"></script>
<script src="../../scripts/datatables.js"></script>
<script src="https://kit.fontawesome.com/64cf43ccc2.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

<%# Delete Button %>
<script>
  $(document).ready(function () {
    $("table").DataTable({
      order: [0, "desc"],
    });
  });
</script>
<script>
  const deleteButtons = document.querySelectorAll(".btn-delete");
  deleteButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const filename = button.getAttribute("data-file");
      if (confirm(`Are you sure you want to delete ${filename}?`)) {
        fetch(`/delete?file=${filename}`)
          .then(() => window.location.reload())
          .catch((error) => console.error(error));
      }
    });
  });
</script>

<%# Delete ALL Button %>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  $(document).ready(function () {
    // Event listener for clicking the "Delete All" button
    $("#deleteAllBtn").on("click", function (e) {
      e.preventDefault(); // Prevent the default action (i.e., following the link)

      // Show a confirmation dialog
      if (
        confirm(
          "Eyow u kno whatchu doin cuh?? sure u wanna delete all this shit??"
        )
      ) {
        // If user confirms, redirect to the delete-all route
        window.location.href = "/delete-all";
      }
    });
  });
</script>

<%# SEARCH SCRIPT %>
<script>
  // Get the search input element
  const searchInput = document.getElementById("searchInput");

  // Add event listener to the search input
  searchInput.addEventListener("input", function () {
    const searchValue = this.value.toLowerCase(); // Convert input value to lowercase for case-insensitive search

    // Get all cards
    const cards = document.querySelectorAll(".page-item");

    // Loop through each card
    cards.forEach((card) => {
      const cardText = card.textContent.toLowerCase(); // Get card content and convert to lowercase

      // If card content includes the search value, display the card, otherwise hide it
      if (cardText.includes(searchValue)) {
        card.style.display = "block"; // Show card
      } else {
        card.style.display = "none"; // Hide card
      }
    });
  });
</script>
<%# PDF SCRIPT %>
<script>
  document.querySelectorAll(".svg-trigger").forEach(function (svg) {
    svg.addEventListener("click", function () {
      var modal = document.getElementById("modal");
      modal.style.display = "block";

      // Set the source of the iframe to the PDF file
      var fileName = svg
        .closest(".page-item")
        .querySelector(".card-text").textContent;
      var pdfViewer = document.getElementById("pdfViewer");
      pdfViewer.src = "../../files/documents/" + fileName;
    });
  });

  document.querySelector(".close").addEventListener("click", function () {
    document.getElementById("modal").style.display = "none";
  });
</script>

<%# ENLARGE MODAL SCRIPT %>
<script>
  function toggleEnlargedModal() {
    const modal = document.getElementById("modal");
    modal.classList.toggle("enlarged");
  }

  // Add event listener for the 'Enlarge' button
  document
    .getElementById("enlargeButton")
    .addEventListener("click", function () {
      toggleEnlargedModal();
    });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const convertLinks = document.querySelectorAll(".convert-link");
    const pdfViewer = document.getElementById("pdfViewer");

    convertLinks.forEach((link) => {
      link.addEventListener("click", function (event) {
        event.preventDefault();
        const fileName = this.getAttribute("data-filename");
        fetch(`/convertFromOffice/${fileName}`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("Conversion failed");
            }
            return response.blob();
          })
          .then((blob) => {
            const objectURL = URL.createObjectURL(blob);
            pdfViewer.src = objectURL;
            pdfViewer.style.display = "block"; // Show the PDF viewer
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Conversion failed");
          });
      });
    });
  });
</script>
<script>
  document.querySelectorAll(".svg-trigger-docx").forEach(function (svg) {
    svg.addEventListener("click", function () {
      var modal = document.getElementById("modal");

      // Set the source of the iframe to the PDF file
      var fileName = svg
        .closest(".page-item")
        .querySelector(".card-text").textContent;
      var pdfViewer = document.getElementById("pdfViewer");
      pdfViewer.src = "../../files/documents/" + fileName;
    });
  });
</script>
<%# FILTER SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const filterButtons = document.querySelectorAll(".filter-btn");
    const pageItems = document.querySelectorAll(".page-item");

    filterButtons.forEach(function (button) {
      button.addEventListener("click", function () {
        const extension = this.getAttribute("data-extension");
        pageItems.forEach(function (item) {
          const fileExtension = item
            .querySelector(".card-text")
            .textContent.split(".")
            .pop();
          if (
            extension === "all" ||
            (extension === "excel" && fileExtension === "xlsx") ||
            (extension === "pdf" && fileExtension === "pdf") ||
            (extension === "docx" && fileExtension === "docx")
          ) {
            item.style.display = "block";
          } else {
            item.style.display = "none";
          }
        });
      });
    });
  });
  pageItems.forEach(function (item) {
    const fileExtension = item
      .querySelector(".card-text")
      .textContent.split(".")
      .pop();
    if (
      extension === "all" ||
      (extension === "excel" && fileExtension === "xlsx") ||
      fileExtension === extension
    ) {
      item.style.display = "block";
    } else {
      item.style.display = "none";
    }
  });
</script>
<%# SORT SCRIPT %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const sortButton = document.querySelector(".sort-btn");
    const pageItems = document.querySelectorAll(".page-item");
    let ascendingOrder = true; // Default sorting order

    sortButton.addEventListener("click", function () {
      ascendingOrder = !ascendingOrder; // Toggle sorting order on button click

      const sortedItems = Array.from(pageItems).sort((a, b) => {
        const dateA = new Date(a.querySelector(".card-footer").textContent);
        const dateB = new Date(b.querySelector(".card-footer").textContent);
        return ascendingOrder ? dateA - dateB : dateB - dateA; // Sort based on order
      });

      sortedItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });
    });
  });
</script>

<%# SORT SCRIPT ALPHABETICAL %>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleSortButton = document.querySelector(".toggle-sort-btn");
    const pageItemsContainer = document.querySelector(".page-container");
    let isAscending = true; // Flag to track sorting order

    toggleSortButton.addEventListener("click", function () {
      const pageItems = Array.from(
        pageItemsContainer.querySelectorAll(".page-item")
      );

      pageItems.sort((a, b) => {
        const textA = a.querySelector(".card-text").textContent.toLowerCase();
        const textB = b.querySelector(".card-text").textContent.toLowerCase();

        if (isAscending) {
          return textA.localeCompare(textB); // Sort alphabetically ascending
        } else {
          return textB.localeCompare(textA); // Sort alphabetically descending
        }
      });

      pageItems.forEach((item, index) => {
        item.style.order = index; // Update the order of items based on sorting
      });

      isAscending = !isAscending; // Toggle sorting order flag
    });
  });
</script>
<script>
  $(document).ready(function () {
    setTimeout(function () {
      $("#autoDismissAlert").alert("close");
    }, 5000);
  });
</script>
